# excercise_08
## 题目描述
在第七次作业中，可以发现在驱动力较大时，系统出现了明显的混沌现象，而驱动力减小时，这种现象并不明显，本次作业探索混沌现象出现的过程
，并考虑当驱动力继续增强时，系统所产生的变化（Exercise3.18）

Exercise3.18 
Calculate Poincare section for the pendulum as it undergoes the period-doubling route to chaos. Plot ω versus θ,
with one point plotted for each drive cycle, as in Figure 3.9. Do this for F_D =1.4, 1.44, 1.465, using the other
parameters as given in connection with Figure 3.10. You should find that after removing the points corresponding 
to the initial transient the attractor in the period-1 regime will contain only a single point. Likewise, if the
behavior is period n, the attractor will contain n discrete points
##代码
//首先，考虑增大驱动力，结果如下//
```
import math
import pylab as py
g=9.8
l=9.8
q=0.5
ou_D=2/3
class pendulum0:
    def __init__(self,F_D,sita):
        self.sita=[sita]
        self.omiga=[0]
        self.t=[0]
        self.dt=0.01
        self.F_D=F_D
    def calculate(self):
        while self.t[-1]<100:
            omiga_new=self.omiga[-1]-((g/l)*(math.sin(self.sita[-1]))+q*self.omiga[-1]-self.F_D*math.sin(ou_D*self.t[-1]))*self.dt
            self.omiga.append(omiga_new)
            sita_new=self.sita[-1]+self.omiga[-1]*self.dt
            t_new=self.t[-1]+self.dt
            
            while sita_new > math.pi:
                sita_new -=2*(math.pi)
            while sita_new < -math.pi:
                sita_new +=2*(math.pi)
                
            self.sita.append(sita_new)
            self.t.append(t_new)
    def plot(self,color):
        py.plot(self.t,self.sita,'b')
        py.xlabel('time [s]')
        py.xlim(0,100)
        py.ylabel('$\\theta$ [radians]')
sub1=py.subplot(221)
A=pendulum0(1.2,0.1)
A.calculate()
sub1.plot(A.t,A.sita,'b',label='$F_D=1.1.2$')
sub1.set_title('$\\theta$ versus time')
sub1.legend(loc="upper right",frameon=False)
py.ylabel('$\\theta$(radians)')
py.xlabel('                                                                  time(s)')

sub2=py.subplot(222)
A=pendulum0(1.35,0.1)
A.calculate()
sub2.plot(A.t,A.sita,'b',label='$F_D=1.35$')
sub2.set_title('$\\theta$ versus time')
sub2.legend(loc="upper right",frameon=False)
py.ylabel('$\\theta$(radians)')
py.xlabel('                                                                  time(s)')

sub3=py.subplot(223)
A=pendulum0(1.44,0.1)
A.calculate()
sub3.plot(A.t,A.sita,'b',label='$F_D=1.44$')
sub3.set_title('$\\theta$ versus time')
sub3.legend(loc="upper right",frameon=False)
py.ylabel('$\\theta$(radians)')
py.xlabel('                                                                  time(s)')

sub4=py.subplot(224)
A=pendulum0(1.465,0.1)
A.calculate()
sub4.plot(A.t,A.sita,'r',label='$F_D=1.465$')
sub4.set_title('$\\theta$ versus time')
sub4.legend(loc="upper right",frameon=False)
py.ylabel('$\\theta$(radians)')
py.xlabel('                                                                  time(s)') 
py.show()import math
import pylab as py
g=9.8
l=9.8
q=0.5
ou_D=2/3
class pendulum0:
    def __init__(self,F_D,sita):
        self.sita=[sita]
        self.omiga=[0]
        self.t=[0]
        self.dt=0.01
        self.F_D=F_D
    def calculate(self):
        while self.t[-1]<100:
            omiga_new=self.omiga[-1]-((g/l)*(math.sin(self.sita[-1]))+q*self.omiga[-1]-self.F_D*math.sin(ou_D*self.t[-1]))*self.dt
            self.omiga.append(omiga_new)
            sita_new=self.sita[-1]+self.omiga[-1]*self.dt
            t_new=self.t[-1]+self.dt
            
            while sita_new > math.pi:
                sita_new -=2*(math.pi)
            while sita_new < -math.pi:
                sita_new +=2*(math.pi)
                
            self.sita.append(sita_new)
            self.t.append(t_new)
    def plot(self,color):
        py.plot(self.t,self.sita,'b')
        py.xlabel('time [s]')
        py.xlim(0,100)
        py.ylabel('$\\theta$ [radians]')
sub1=py.subplot(221)
A=pendulum0(1.2,0.1)
A.calculate()
sub1.plot(A.t,A.sita,'b',label='$F_D=1.1.2$')
sub1.set_title('$\\theta$ versus time')
sub1.legend(loc="upper right",frameon=False)
py.ylabel('$\\theta$(radians)')
py.xlabel('                                                                  time(s)')

sub2=py.subplot(222)
A=pendulum0(1.35,0.1)
A.calculate()
sub2.plot(A.t,A.sita,'b',label='$F_D=1.35$')
sub2.set_title('$\\theta$ versus time')
sub2.legend(loc="upper right",frameon=False)
py.ylabel('$\\theta$(radians)')
py.xlabel('                                                                  time(s)')

sub3=py.subplot(223)
A=pendulum0(1.44,0.1)
A.calculate()
sub3.plot(A.t,A.sita,'b',label='$F_D=1.44$')
sub3.set_title('$\\theta$ versus time')
sub3.legend(loc="upper right",frameon=False)
py.ylabel('$\\theta$(radians)')
py.xlabel('                                                                  time(s)')

sub4=py.subplot(224)
A=pendulum0(1.465,0.1)
A.calculate()
sub4.plot(A.t,A.sita,'r',label='$F_D=1.465$')
sub4.set_title('$\\theta$ versus time')
sub4.legend(loc="upper right",frameon=False)
py.ylabel('$\\theta$(radians)')
py.xlabel('                                                                  time(s)') 
py.show()
```
//当驱动力不断增加时，系统由有序趋于混沌而后再次趋于有序，由图可知，第一张图的摆的周期与外界驱动力的相同，
第二张图是外力周期两倍，第三张图是外力周期四倍，考虑利用教材所述的bifurcation diagrams做一个简单的分析//
```
from __future__ import division
from math import *
from pylab import *
from numpy import *
def change_amp(F,f):
    # define some constants
    q = 0.5
    l = 9.8
    g = 9.8
    dt = pi/100
    theta0 = 0.2
    omega0 = 0
    angle = [theta0]
    avelo = [omega0]
    t = [0]
    an=[]
    while t[-1] <= 1200*pi:
        avelo_new = avelo[-1] - ((g/l)*sin(angle[-1]) + q*avelo[-1] - F*sin(f*t[-1]))*dt
        avelo.append(avelo_new)
        angle_new = angle[-1] + avelo[-1]*dt
        while angle_new > pi:
            angle_new -= 2*pi
        while angle_new < -pi:
            angle_new += 2*pi
        angle.append(angle_new)
        if t[-1]>=900*pi:
            if t[-1]%(3*pi)<=dt:
                an.append(angle_new)
        t_new = t[-1] + dt
        t.append(t_new)
    return an

fdd_1=list(linspace(1.35,1.5,100))
fd_1=[]
th_1=[]
for i in fdd_1:
    points=change_amp(i,2/3)
    for j in points:
        fd_1.append(i)
        th_1.append(j)

scatter(fd_1,th_1,s=10)
grid(True)
xlim(1.35,1.48)
ylim(0,3)
xlabel('$F_D=1.35$')
ylabel('theta(radians)')
show()
```
//F从1.35至1.42的这段区域内，每一个F只对应一个角度，这时单摆的周期与外力周期一致，而后每一个F对应两个，四个角度，
此时单摆的周期为外力周期的两倍，四倍。当外力持续增大时，周期会更大，进而再一次进入混沌. 
根据3.18所述，结果如下//
```
import math
import pylab as py
g=9.8
l=9.8
q=0.5
ou_D=2/3
class pendulum0:
    def __init__(self,F_D,sita):
        self.sita=[sita]
        self.omiga=[0]
        self.t=[0]
        self.dt=(3*(math.pi))/1000
        self.F_D=F_D
        self.omiga2=[]
        self.sita2=[]
    
    def calculate(self):
        while self.t[-1]<6000:
            omiga_new=self.omiga[-1]-((g/l)*(math.sin(self.sita[-1]))+q*self.omiga[-1]-self.F_D*math.sin(ou_D*self.t[-1]))*self.dt
            self.omiga.append(omiga_new)
            sita_new=self.sita[-1]+self.omiga[-1]*self.dt
            t_new=self.t[-1]+self.dt
            
            while sita_new > math.pi:
                sita_new -=2*(math.pi)
            while sita_new < -math.pi:
                sita_new +=2*(math.pi)       
            self.sita.append(sita_new)
            self.t.append(t_new)
            
sub1=py.subplot(221)  
A=pendulum0(1.4,0.2)
A.calculate()
for i in range(300,600):
        A.sita2.append(A.sita[1000*i])
        A.omiga2.append(A.omiga[1000*i])
sub1.plot(A.sita2,A.omiga2,'.',label='$2/3t=2\pi n$')
sub1.set_title('$\omega$ versus $\\theta$')
sub1.legend(loc="upper right",frameon=False)
py.xlabel('$\\theta$(radians)')
py.ylabel('$\omega$(radians/s)')



            
sub2=py.subplot(222)  
A=pendulum0(1.4,0.2)
A.calculate()
for i in range(300,600):
        A.sita2.append(A.sita[1000*i+125])
        A.omiga2.append(A.omiga[1000*i+125])
sub2.plot(A.sita2,A.omiga2,'.',label='$2/3t=2\pi n+\pi /4$')
sub2.set_title('$\omega$ versus $\\theta$')
sub2.legend(loc="upper right",frameon=False)
py.xlabel('$\\theta$(radians)')
py.ylabel('$\omega$(radians/s)')

            
sub3=py.subplot(223)  
A=pendulum0(1.4,0.2)
A.calculate()
for i in range(300,600):
        A.sita2.append(A.sita[1000*i+250])
        A.omiga2.append(A.omiga[1000*i+250])
sub3.plot(A.sita2,A.omiga2,'.',label='$2/3t=2\pi n+\pi /2$')
sub3.legend(loc="upper right",frameon=False)
py.xlabel('$\\theta$(radians)')
py.ylabel('$\omega$(radians/s)')

            
sub4=py.subplot(224)  
A=pendulum0(1.4,0.2)
A.calculate()
for i in range(300,600):
        A.sita2.append(A.sita[1000*i+375])
        A.omiga2.append(A.omiga[1000*i+375])
sub4.plot(A.sita2,A.omiga2,'.',label='$2/3t=2\pi n+3\pi /4$')
sub4.legend(loc="upper right",frameon=False)
py.xlabel('$\\theta$(radians)')
py.ylabel('$\omega$(radians/s)')
```
## 结论
在不同的角度观察了外力为1.4 1.44 1.465情况下的系统，得出了相应的周期关系，并简要分析了系统的状态变化
